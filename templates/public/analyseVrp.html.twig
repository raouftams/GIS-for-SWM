<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Analyse VRP</title>

    <!-- fonctions du formulaire d'analyse -->
    <script src="{{asset('js/vrp/analyseVrp.js')}}"></script>
    <!-- jQuery -->
    <script type="text/javascript" src="{{asset('js/jquery.min.js')}}"></script>
	<!-- MDB core JavaScript -->
	<script type="text/javascript" src="{{asset('js/mdb.min.js')}}"></script>
    <!-- Bootstrap tooltips -->
	<script type="text/javascript" src="{{asset('js/popper.min.js')}}"></script>
	<!-- Bootstrap core JavaScript -->
	<script type="text/javascript" src="{{asset('js/bootstrap.min.js')}}"></script>
    <script src="{{asset('js/leaflet/leaflet.js')}}"></script>
    <script src="{{asset('js/leaflet/esriservices/esri-leaflet.js')}}"></script>

	<script src="{{asset('js/leaflet/locate/L.Control.Locate.min.js')}}"></script>

	<script src=" https://cdn.rawgit.com/hayeswise/Leaflet.PointInPolygon/v1.0.0/wise-leaflet-pip.js"></script>

	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/0.4.2/leaflet.draw.css"/>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/0.4.2/leaflet.draw.js"></script>
	
	<!-- Font Awesome -->
	<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.11.2/css/all.css">

	<link rel="stylesheet" href="{{asset('css/bootstrap.min.css')}}">
	<!-- Material Design Bootstrap -->
	<link rel="stylesheet" href="{{asset('css/mdb.min.css')}}">
	<link rel="stylesheet" href="{{asset('js/leaflet/leaflet.css')}}" />
	<link rel="stylesheet" href="{{asset('js/leaflet/locate/L.Control.Locate.min.css')}}">
	<link rel="stylesheet" href="{{asset('css/analyseVrp.css')}}">
	
</head>
<body>
	<nav class="navbar navbar-expand-lg fixed-top">
		<h2 class="navbar-brand" >Analyse VRP</h2>
		<button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
		  <span class="navbar-toggler-icon"></span>
		</button>
		<div class="collapse navbar-collapse" id="navbarNav">
		  <ul class="navbar-nav">
			<li class="nav-item active">
			  <a class="nav-link" href="{{path('dashboard')}}"><i class="fas fa-home"></i>dashboard <span class="sr-only">(current)</span></a>
			</li>
			<li class="nav-item dropdown">
				<a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
					<i class="fas fa-table"></i> &nbsp; Table
				</a>
				<div class="dropdown-menu" aria-labelledby="navbarDropdown">
				  <a class="dropdown-item" href='{{path("tournees")}}'>Tournées</a>
				  <a class="dropdown-item" href='{{path("pointsIndex")}}'>Points</a>
				  <a class="dropdown-item" href='{{path("bacsIndex")}}'>Bacs</a>
				  <a class="dropdown-item" href='{{path("vehiclesIndex")}}'>Véhicules</a>
				</div>
			  </li>
			<li class="nav-item">
			  <a class="nav-link" href="{{path('maps')}}"><i class="fas fa-map-marked-alt"></i>&nbsp; Maps</a>
			</li>
			<li class="nav-item">
			  <a class="nav-link disabled" href="#">Analyse</a>
			</li>
		  </ul>
		  	<ul class="navbar-nav ml-auto">
          		<li class="nav-item"><a class="nav-link logout" href="{{path('logout')}}" ><i class="fas fa-sign-out-alt"></i>&nbsp; Déconnexion </a> 
          		</li>
        	</ul>
		</div>
    </nav>
	
	<div id="map"></div>
	
	<div class="analysis">
			<div class="vrp-form" id="vrpDiv">
				<div class="parameters-links">
					<a class="parameters-link font-weight-bold" id="points-click">Points</a>
					<a class="font-weight-bold parameters-link2 " id="depots-click">Depôts</a>
					<a class="parameters-link2 font-weight-bold" id="vehicles-click">Véhicules</a>
				</div>
				<hr>
				<div id="les-ordres" >
					<form onsubmit="select(); return false;" id="ordersForm">
						<fieldset>
						<legend>Les ordres <button class="btn btn-md btn-ajouter">sélectionner</button></legend>
						<div class="form-row">
							<label for="Couche" class="col-sm-4 col-form-label">Couche</label>
							<select class="form-control Depot col-md-8" id="Coucheo">
								<option value="" disabled selected>Point de collecte</option>
							</select>
							</div>                     
						</fieldset>
					</form>
				</div>   
				

				<div id="les-depots" style="display: none;">	
					<form id="depotsForm">
						<fieldset>
						<legend>Les dépôts <button type="button" class="btn btn-md btn-ajouter" onclick="AjouterDepot()">+</button></legend>
						<div class="form-row">
							<label for="Couche" class="col-sm-4 col-form-label">Dépôt:</label>
							<select class="form-control Depot col-md-8" id="Couche">
							{% for depot in depots %}
								<option value="{{depot.code}}"  selected>{{depot.designation}}</option>
							{% endfor %}
							</select>
							</div>

							<div class="form-row">
								<label for="hd" class="col-sm-4 col-form-label" >Heure de debut </label>
								<input type="time" id="hd" class="form-control Depot col-md-8" placeholder="Select time">
							</div>
							<div class="form-row">
								<label for="hf" class="col-sm-4 col-form-label">Heure de fin </label>
								<input type="time" id="hf" class="form-control Depot col-md-8" placeholder="Select time" >
							</div>
						</fieldset>
					</form>
				</div>

				<div id="les-vehicules" style="display: none;">
					<form id="vehicleForm">
						<fieldset>
							<legend> 
								<a href="#popup-vehicles" onclick="setVehiclesToTable()" title="Table des véhicules">Les véhicules </a> 
								<button type="button" title="Ajouter véhicule" class="btn btn-md btn-ajouter" onclick="AjouterVehicule()">+</button>
							</legend>	
							<div class="form-row">
								<label for="Volume" class="col-sm-4 col-form-label">Volume</label>
								<select class="form-control col-md-8" id="Volume">
								<option value="" disabled selected>Choix du Volume</option>
								{% for vehicle in vehicles %}
									<option value="{{vehicle.volume}}">Benne {{vehicle.volume}}m&#179;</option>
								{% endfor %}
								</select>
							</div>
							<div class="form-row">
								<label for="DepotDepart" class="col-sm-4 col-form-label">Depot de depart:</label>
								<select class="form-control col-md-8" id="DepotDepart">
								<option value="" disabled selected>Choix du Depot</option>
								</select>
							</div>
							<div class="form-row">
								<label for="DepotFin" class="col-sm-4 col-form-label">Depot de fin de tournée </label>
								<select class="form-control col-md-8" id="DepotFin">
								<option value="" disabled selected>Choix du Depot</option>
								</select>
							</div>
							<div class="form-row">
								<label for="HeureDebut" class="col-sm-4 col-form-label">Heure de debut </label>
								<input type="time" id="HeureDebut" class="form-control col-md-8" placeholder="Select time">
							</div>
							<div class="form-row">
								<label for="HeureFin" class="col-sm-4 col-form-label">Heure de fin </label>
								<input type="time" id="HeureFin" class="form-control col-md-8" placeholder="Select time">
							</div>
							<div class="form-row">
								<label class="col-sm-4 col-form-label" for="ChargeHoraire">Charge horaire max</label>
								<input type="time" id="ChargeHoraire" class="form-control col-md-8" placeholder="Select time">
							</div>
							<div class="form-row">
								<label class="col-sm-4 col-form-label" for="NbrMaxOrdres">Nombre max d'ordres a visiter</label>
								<input type="number" min="0" class="form-control col-md-8" placeholder="0" id="NbrMaxOrdres">
							</div>
							<div class="form-row">
								<label class="col-sm-4 col-form-label" for="costUnitTime">Coûts par une unité de temps:</label>
								<input type="number" min="0" step="0.1" class="form-control col-md-8" placeholder="0" id="costUnitTime">
							</div>
							<div class="form-row">
								<label class="col-sm-4 col-form-label" for="costUnitDistance">Coûts par une unité de distance:</label>
								<input type="number" min="0" step="0.1" class="form-control col-md-8" placeholder="0" id="costUnitDistance">
							</div>
						</fieldset>
					</form>
				</div>
				<br>
				<div id="btn-analyse" style="text-align:center;">
					<button type="button" id="btn-analyse" class="text-white font-weight-bold"  onclick="makeRequest()" >ANALYSER</button>      
				</div>
				<div id="btn-save-recalculate" style="display: none; text-align: center;">
					<button type="button" id="btn-save" class="btn btn-success" onclick="saveResult()" >Sauvegarder</button>
					<button type="button" id="btn-recalculate" class="btn btn-warning" onclick="recalculate()" >Recalcul</button>
					<a href="#popup-result"><button class="btn btn-unique" id="btn-results" onclick="setDataToTable()" >Resultats</button></a>
				</div>
			</div>
	</div>
	

	<div id="popup1" class="overlay">
		<div class="popup">
			<a class="close" href="#">&times;</a><br>
			<div class="content" id="content">
				<form method="POST" class="form" id="form-point">
					<div class="form-group col-md-8">
						<label for="libelle">Début fenêtre de temps:</label>
						<input class="form-control" type="time" name="debut_fenetre_temps" id="debut_fenetre_temps">
					</div>
					<div class="form-group col-md-8">
						<label for="Adresse">Fin fenêtre de temps:</label>
						<input type="time" class="form-control" name="fin_fenetre_temps" id="fin_fenetre_temps">
					</div>
				</form>
				<div class="form-group">
					<button class="btn btn-primary" type="submit" style="margin-left: 5px;" onclick="savePointData()" >Sauvegarder</button>
				</div>
			</div>
		</div>
	</div>

	<div class="overlay" id="popup-vehicles">
		<div class="popup" style="width: 80%;">
			<h3>Table des véhicules:</h3>
			<a class="close" href="#">&times;</a><br>
			<div class="content" id="content">
				<table class="table" id="vehicles-table">
					<thead>
						<th>Véhicule</th>
						<th>Volume</th>
						<th>Dépôt départ</th>
						<th>Dépôt fin</th>
						<th>Heure début</th>
						<th>Charge horaire</th>
						<th>Nombre max d'ordres</th>
						<th>coûts par minute</th>
						<th>coûts par Km</th>
					</thead>
					<tbody id="vehicles_table">

					</tbody>
				</table>
			</div>
		</div>
	</div>

	<div id="popup-result" class="overlay">
		<div class="popup" style="width: 99%;">
			<h3 class="text-info">Résultats de l'analyse</h3>
			<a class="close" href="#">&times;</a><br>
			<div class="content" id="content">
				<table class="table">
					<thead >
						<th>Véhicule</th>
						<th>Nombre de points</th>
						<th>Temps total (Min)</th>
						<th>Distance totale (Km)</th>
						<th>Heure démarrage parc</th>
						<th>Début collecte</th>
						<th>Fin collecte</th>
						<th>Arrivé au cet</th>
						<th>Départ de cet</th>
						<th>Temps transport</th>
						<th>Distance transport</th>
						<th>Temps collecte</th>
						<th>Distance collecte</th>
						<th>Quantité déchets (Tonne)</th>
						<th>Heure Fin</th>
					</thead>
					<tbody id="result-table">
						
					</tbody>
				</table>
				
			</div>
		</div>
	</div>


	<div id="loading-image"></div>


<script type="text/javascript">
    //Instanciation d'une maps avec le fond topographiqe d'ESRI
	var map = L.map('map',{ drawControl: true }).setView([36.7206251, 3.1854975], 13);
	L.esri.basemapLayer('Topographic').addTo(map);
	
    // retourne code hex d'une couleur pour les routes obtenues avec vrp
	function getRouteColor(r){
		return r == 1 ? '#ff0000':
				r == 2 ? '#ffa500':
				r == 3 ? '#ffff00':
				r == 4 ? '#008000':
				r == 5 ? '#0000ff':
				r == 6 ? '#4b0082':
				r == 7 ? '#ee82ee':
				r == 8 ? '#6b8464':
				r == 9 ? '#cc1a58':
				 '#4dccff';
	}

	// requete pour charger les points de collecte
  	$.ajax({url:"{{path('getPoints')}}",
		success: function(response){
			var myIcon = L.icon({
				iconUrl: '{{asset("img/leaflet/marker.png")}}',
				iconSize: [30, 30],
			});

			function onEachFeature(feature, layer) {
				var code = feature.properties.code_point;
				var fonction = "getPointCode('code_point')";
				fonction = fonction.replace("code_point", code);
				layer.bindPopup('<b>Code: ' + feature.properties.code_point + '</b><p><b>Libellé: </b>' + feature.properties.libelle + '</p><b>Adresse: </b>' + feature.properties.adresse + '</p><a href="#popup1"><button onclick="'+fonction+'" class="btn btn-primary btn-sm text-white">Modifier</button></a>');
			}

			window.points = JSON.parse(response);
            Points = window.points;
			window.lyrPoints = L.geoJSON(window.points, {
				pointToLayer: function x(features, coordinates) {
							return L.circleMarker(coordinates, {
								color: 'black',
								fillColor: 'black',
								fillOpacity: 0.7,
								radius: 5
							});
					},
				onEachFeature: onEachFeature
				}).addTo(map);
		},
		error: function e(error){
			alert("Error: "+ error);
		}
	});

    // requete pour charger le parc et les CETs
	$.ajax({url:"{{path('getDepotss')}}",
		success: function(response){
			function onEachFeature(feature, layer) {
				layer.bindPopup('<b>Désignation: ' + feature.properties.designatio + '</b>');
			}

			window.depots = JSON.parse(response);
			var lyrDepots = L.geoJSON(window.depots, {
				pointToLayer: function x(features, coordinates) {
							return L.marker(coordinates);
					},
				onEachFeature: onEachFeature
				}).addTo(map);
		},
		error: function e(error){
			alert("Error: "+ error);
		}
	});

	
	// barre de controle des dessins sur la map
	var drawPluginOptions = {
        position: 'topright',
        draw: {
            polygon: false,
            // disable toolbar item by setting it to false
            polyline: false,
            circle: false, // Turns off this drawing tool
            rectangle: false,
            marker: false,
            },
        edit: false
    };
    var drawControl = new L.Control.Draw(drawPluginOptions);
    map.addControl(drawControl);
    var editableLayers = new L.FeatureGroup();
    map.addLayer(editableLayers);

    // gérer les dessin sur la map
    map.on('draw:created', function(e) {
        var type = e.layerType;
        window.layer = e.layer;

        if (type === 'marker') {
            window.layer.bindPopup('A popup!');
        }

        editableLayers.addLayer(window.layer);
    });

    // fonction de selection manuelle des points de collecte
    function select(){
        var selected = [];
        window.lyrPoints.eachLayer(function (marker) {
            if (!window.layer.contains(marker.getLatLng())) {
                marker.remove();
            }else{
                var m = marker.toGeoJSON();
                L.extend(m.properties, marker.properties);
                selected.push(m);
            }
            map.removeLayer(window.layer);
        });
        Points = selected;
    }


    // requete d'analyse VRP
    function analyser1(){
        $.ajax({url:"{{path('vrpService')}}",
            success: function(response){
                window.i = 1;
                function onEachFeature(feature, layer) {
                    layer.bindPopup('<b>Véhicule: </b>' + feature.properties.Name + '<br><b>Distance totale: </b>' + (feature.properties.TotalDistance+45) + '<br><b>Temps total: </b>' + (feature.properties.TotalTime+49) +'<br><b>Nombre d\'ordres:</b>' + feature.properties.OrderCount + '');
                    layer.setStyle({
                        color: getRouteColor(window.i)
                    });
                    window.i++;
                }

                var routes = JSON.parse(response);
                var lyrRoutes = L.geoJSON(routes.features, {
                    onEachFeature: onEachFeature,
                    }).addTo(map);
            },
            error: function e(error){
                alert("erreur");
            }
        });
    }
    
	
//------------------------------------- Données à analyser ---------------------------------------------
    //fonction d'envoi de données saisies 
    function makeRequest() {
		$('#loading-image').show();
		$('#btn-analyse').hide();
		$('#btn-save-recalculate').show();

        var data = JSON.stringify({
                    "points": Points,
                    "depots": Depots,
                    "vehicles": Vehicules
                });
        $.ajax({
            url: '{{path("receiveData")}}',
            type: 'POST',
            contentType: 'JSON',
            data: data,
            success: function(response) { 
              window.i = 1;
                function onEachFeature(feature, layer) {
                    layer.bindPopup('<b>Véhicule: </b>' + feature.properties.Name + '<br><b>Distance totale: </b>' + (feature.properties.TotalDistance+45) + '<br><b>Temps total: </b>' + (feature.properties.TotalTime+49) +'<br><b>Nombre d\'ordres:</b>' + feature.properties.OrderCount + '');
                    layer.setStyle({
                        color: getRouteColor(window.i)
                    });
                    window.i++;
                }
				var result = JSON.parse(response);
                window.routes = result.routes;
				window.stops = result.stops;
				window.plan = result.plan;
                window.lyrRoutes = L.geoJSON(window.routes.features, {
                    onEachFeature: onEachFeature,
                    }).addTo(map);
				
				$('#loading-image').hide();
            },
            error: function(XMLHttpRequest, textStatus, errorThrown)
            {
			  alert('Error: ' +  errorThrown);
			  $('#loading-image').hide();
            }
        });
    }
	
	// fonction de mise à jour des données des points de collecte selon les résultat du VRP
	function saveResult(){
		$('#loading-image').show();

		var data = JSON.stringify({plan: window.plan});
		$.ajax({
			url: "{{path('saveVrpResults')}}",
			type: 'POST',
			contentType: 'JSON',
			data: data,
			success: function(response){
				alert(response);
				$('#btn-save-recalculate').hide();
				$('#btn-analyse').show();
				$('#loading-image').hide();
				
			},
			error: function(XMLHttpRequest, textStatus, errorThrown){
				alert('Error: ' + errorThrown);
				$('#loading-image').hide();
			}
		})
	}

	function setDataToTable(){
		var body = document.getElementById("result-table");
		$('#result-table').empty();
		var i = 1;
		window.plan.forEach(function(obj){
			
			nbRotations = obj.rotations.length;
			obj.rotations.forEach(function(rotation){
				var tr = document.createElement('tr');
				tr.setAttribute("rowspan", nbRotations);
				if(i%2 == 0){
				}else{
					tr.setAttribute("class","bg-light");
				}
				var td = document.createElement('td');
				td.appendChild( document.createTextNode(obj.vehicle));
				tr.appendChild(td);

				td = document.createElement('td');
				td.appendChild( document.createTextNode(rotation.nombre_points));
				tr.appendChild(td);
				td = document.createElement('td');
				td.appendChild( document.createTextNode(Math.round(rotation.temps_total)));
				tr.appendChild(td);
				td = document.createElement('td');
				td.appendChild( document.createTextNode(Math.round(rotation.distance_totale)));
				tr.appendChild(td);
				td = document.createElement('td');
				td.appendChild( document.createTextNode((new Date(rotation.demarrage_parc)).toString().split(" ")[4]));
				tr.appendChild(td);
				td = document.createElement('td');
				td.appendChild( document.createTextNode((new Date(rotation.debut_secteur)).toString().split(" ")[4]));
				tr.appendChild(td);
				td = document.createElement('td');
				td.appendChild( document.createTextNode((new Date(rotation.fin_secteur)).toString().split(" ")[4]));
				tr.appendChild(td);
				td = document.createElement('td');
				td.appendChild( document.createTextNode((new Date(rotation.arrive_cet)).toString().split(" ")[4]));
				tr.appendChild(td);
				td = document.createElement('td');
				td.appendChild( document.createTextNode((new Date(rotation.depart_cet)).toString().split(" ")[4]));
				tr.appendChild(td);
				td = document.createElement('td');
				td.appendChild( document.createTextNode(rotation.temps_transport.toFixed(2)));
				tr.appendChild(td);
				td = document.createElement('td');
				td.appendChild( document.createTextNode(rotation.distance_transport.toFixed(2)));
				tr.appendChild(td);
				td = document.createElement('td');
				td.appendChild( document.createTextNode(rotation.temps_collecte.toFixed(2)));
				tr.appendChild(td);
				td = document.createElement('td');
				td.appendChild( document.createTextNode(rotation.distance_collecte.toFixed(2)));
				tr.appendChild(td);
				td = document.createElement('td');
				td.appendChild( document.createTextNode(rotation.quantite_dechets));
				tr.appendChild(td);
				td = document.createElement('td');
				td.appendChild( document.createTextNode((new Date(rotation.fin_rotation)).toString().split(" ")[4]));
				tr.appendChild(td);
				body.appendChild(tr);
			});
			i = i+1;
			
		});	
		
	}

	function setVehiclesToTable(){
		var body = document.getElementById("vehicles_table");
		$(body).empty();
		var i = 0;
		Vehicules.forEach(function(vehicle) {
			var tr = document.createElement('tr');
			var td = document.createElement('td');
			td.appendChild(document.createTextNode(i));
			tr.appendChild(td); 
			
			td = document.createElement('td');
			td.appendChild( document.createTextNode(vehicle.volume));
			tr.appendChild(td);
			td = document.createElement('td');
			td.appendChild( document.createTextNode(vehicle.depotDepart));
			tr.appendChild(td);
			td = document.createElement('td');
			td.appendChild( document.createTextNode(vehicle.depotFin));
			tr.appendChild(td);
			td = document.createElement('td');
			td.appendChild( document.createTextNode(vehicle.heureDebut));
			tr.appendChild(td);
			td = document.createElement('td');
			td.appendChild( document.createTextNode(vehicle.chargeHoraire));
			tr.appendChild(td);
			td = document.createElement('td');
			td.appendChild( document.createTextNode(vehicle.nbrMaxOrdres));
			tr.appendChild(td);
			td = document.createElement('td');
			td.appendChild( document.createTextNode(vehicle.costUnitTime));
			tr.appendChild(td);
			td = document.createElement('td');
			td.appendChild( document.createTextNode(vehicle.costUnitDistance));
			tr.appendChild(td);
			td = document.createElement('td');
			var btn = document.createElement('button');
			btn.setAttribute("type", "button");
			btn.setAttribute("class", "btn btn-danger btn-sm");
			btn.setAttribute("onclick", "deleteVehicle("+i+")");
			btn.appendChild(document.createTextNode("delete"));
			td.appendChild(btn);
			tr.appendChild(td);

			body.appendChild(tr);
			i = i+1;
		});
	}

	function deleteVehicle(index){
		Vehicules.splice(index, 1);
		setVehiclesToTable();
	}
</script>

<script>
	
	
	function recalculate(){
		map.removeLayer(window.lyrRoutes);
		$('#btn-save-recalculate').hide();
		$('#btn-analyse').show();
	}

	// get point's time windows
	function getPointCode(code){
		window.code = code;
		window.points.features.forEach(function(point){
			if(point.properties.code_point == code){
				var dateDebut = new Date(point.properties.debut_fenetre_temps1);
				var dateFin = new Date(point.properties.fin_fenetre_temps1);
				var dft = dateDebut.toString().split(" ")[4];
				var fft = dateFin.toString().split(" ")[4];
				document.getElementById("debut_fenetre_temps").value = dft;
				document.getElementById("fin_fenetre_temps").value = fft;
			}
		});
	}

	// save time windows of a point in database
	function savePointData(){
		var data = JSON.stringify({
			code_point: window.code,
			debut_fenetre_temps: document.getElementById("debut_fenetre_temps").value,
			fin_fenetre_temps: document.getElementById("fin_fenetre_temps").value
		});

		$.ajax({
			url: "{{path('editPointTime')}}",
			method: 'POST',
			contentType: 'JSON',
			data : data,
			success: function(response){
				alert(response);
				console.log(response);
			},
			error: function(XMLHttpRequest, textStatus, errorThrown){
				alert("Erreur: " + errorThrown);
			}
		});
	}

</script>

<script>
	//UI script
	
	$("#points-click").click(function(){
		$("#les-depots").hide();
		$("#les-vehicules").hide();
		$("#les-ordres").show();
	});

	$("#depots-click").click(function(){
		$("#les-ordres").hide();
		$("#les-vehicules").hide();
		$("#les-depots").show();
	});

	$("#vehicles-click").click(function(){
		$("#les-depots").hide();
		$("#les-ordres").hide();
		$("#les-vehicules").show();
	});
		
</script>
</body>
</html>


